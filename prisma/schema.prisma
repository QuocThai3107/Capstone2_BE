generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PlanSlot {
  planId         Int           @map("plan_id")
  no             String        @db.VarChar(2)
  note           String?       @db.VarChar(50)
  duration       Int?
  id             Int?          @map("_id")
  exercisePostId Int?          @map("exercisepost_id")
  plan           plan          @relation(fields: [planId], references: [plan_id], onDelete: Cascade, map: "PlanSlot_plan_id_fkey")
  exercisepost   exercisepost? @relation(fields: [exercisePostId], references: [exercisepost_id])

  @@id([planId, no])
  @@index([exercisePostId], map: "planslot_exercisepost_id_fkey")
  @@map("planslot")
}

model chat {
  chat_id                    Int      @id @default(autoincrement())
  user_id                    Int
  to_user_id                 Int
  content                    String?  @db.Text
  img_url                    String?  @db.Text
  created_at                 DateTime @default(now())
  updated_at                 DateTime @default(now())
  user_chat_to_user_idTouser user     @relation("chat_to_user_idTouser", fields: [to_user_id], references: [user_id], onDelete: Cascade, map: "Chat_to_user_id_fkey")
  user_chat_user_idTouser    user     @relation("chat_user_idTouser", fields: [user_id], references: [user_id], onDelete: Cascade, map: "Chat_user_id_fkey")

  @@index([to_user_id], map: "Chat_to_user_id_fkey")
  @@index([user_id], map: "Chat_user_id_fkey")
}

model exercisepost {
  exercisepost_id Int               @id @default(autoincrement())
  name            String?           @db.VarChar(50)
  description     String?           @db.Text
  img_url         String?           @db.Text
  status_id       Int?
  user_id         Int
  video_rul       String?           @db.Text
  user            user              @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "exercisepost_ibfk_1")
  exerciseposttag exerciseposttag[]
  planslots       PlanSlot[]
  step            step[]

  @@index([user_id], map: "user_id")
}

model exerciseposttag {
  exercisepost_id Int
  tag_id          Int
  exercisepost    exercisepost @relation(fields: [exercisepost_id], references: [exercisepost_id], onDelete: Cascade, map: "ExercisepostTag_exercisepost_id_fkey")
  tag             tag          @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, map: "ExercisepostTag_tag_id_fkey")

  @@id([exercisepost_id, tag_id])
  @@index([tag_id], map: "ExercisepostTag_tag_id_fkey")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model membership {
  membership_id   Int       @id @default(autoincrement())
  user_id         Int
  membership_name String    @db.VarChar(100)
  description     String?   @db.Text
  membership_type Int
  price           Decimal   @db.Decimal(10, 2)
  duration        Int
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  user            user      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "membership_ibfk_1")
  payment         payment[]

  @@index([user_id], map: "user_id")
}

model payment {
  payment_id     Int        @id @default(autoincrement())
  user_id        Int
  amount_paid    Decimal?   @db.Decimal(10, 2)
  payment_date   DateTime   @default(now())
  status_id      Int?
  payment_method String?    @db.VarChar(20)
  order_id       String?    @db.VarChar(255)
  membership_id  Int
  user           user       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Payment_user_id_fkey")
  membership     membership @relation(fields: [membership_id], references: [membership_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_membership")

  @@index([user_id], map: "Payment_user_id_fkey")
  @@index([membership_id], map: "fk_payment_membership")
}

model plan {
  plan_id        Int        @id @default(autoincrement())
  user_id        Int
  plan_name      String?    @db.VarChar(50)
  Description    String?    @db.Text
  total_duration Int?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @default(now())
  user           user       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Plan_user_id_fkey")
  planSlots      PlanSlot[]
  schedule       schedule[]

  @@index([user_id], map: "Plan_user_id_fkey")
}

model recommend {
  user_id Int
  tag_id  Int
  tag     tag  @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, map: "Recommend_tag_id_fkey")
  user    user @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Recommend_user_id_fkey")

  @@id([user_id, tag_id])
  @@index([tag_id], map: "Recommend_tag_id_fkey")
}

model schedule {
  schedule_id Int       @id @default(autoincrement())
  user_id     Int
  note        String?   @db.VarChar(50)
  plan_id     Int?
  day         DateTime
  start_hour  DateTime? @db.Time(0)
  end_hour    DateTime? @db.Time(0)
  plan        plan?     @relation(fields: [plan_id], references: [plan_id], onDelete: Cascade, map: "Schedule_plan_id_fkey")
  user        user      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Schedule_user_id_fkey")

  @@index([plan_id], map: "Schedule_plan_id_fkey")
  @@index([user_id], map: "Schedule_user_id_fkey")
}

model step {
  exercisepost_id Int
  step_number     String       @db.VarChar(2)
  instruction     String?      @db.Text
  img_url         String?      @db.Text
  exercisepost    exercisepost @relation(fields: [exercisepost_id], references: [exercisepost_id], onDelete: Cascade, map: "Step_exercisepost_id_fkey")

  @@id([exercisepost_id, step_number])
}

model tag {
  tag_id          Int               @id @default(autoincrement())
  tag_name        String?           @db.VarChar(50)
  category        String            @default("") @db.VarChar(50)
  exerciseposttag exerciseposttag[]
  recommend       recommend[]
}

model user {
  user_id                    Int            @id @default(autoincrement())
  username                   String?        @db.VarChar(64)
  password                   String?        @db.VarChar(64)
  email                      String?        @db.VarChar(255)
  phoneNum                   String?        @db.VarChar(10)
  role_id                    Int?
  Status_id                  Int?
  created_at                 DateTime       @default(now())
  updated_at                 DateTime       @default(now())
  name                       String?        @db.VarChar(50)
  imgUrl                     String?        @db.Text
  introduction               String?        @db.Text
  Health_information         String?        @db.Text
  illness                    String?        @db.Text
  gym                        String?        @db.VarChar(50)
  certificate                certificate[]
  chat_chat_to_user_idTouser chat[]         @relation("chat_to_user_idTouser")
  chat_chat_user_idTouser    chat[]         @relation("chat_user_idTouser")
  exercisepost               exercisepost[]
  membership                 membership[]
  payment                    payment[]
  plan                       plan[]
  recommend                  recommend[]
  schedule                   schedule[]
}

/// Model certificate cần có unique identifier để được xử lý bởi Prisma Client
model certificate {
  user_id Int
  imgurl  String @db.Text
  id      Int    @id @default(autoincrement())
  user    user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "certificate_ibfk_1")

  @@index([user_id], map: "user_id")
}
